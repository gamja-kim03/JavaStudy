업캐스팅
- 자바에서 서브 클래스는 슈퍼 클래스의 속성을 상속받기 때문에, 서브 클래스의 객체는 슈퍼 클래스의 멤버를 모두가진다.
  그러므로 서브클래스의 객체를 슈퍼 클래스의 객체로 취급할 수 있다.
- 업캐스팅 : 서브클래싀 객체에 대한 레펄런스를 슈퍼 클래스 타입으로 변환하는것
- 슈퍼 클래스의 레퍼런스로 서브 클래스의 객체를 가리키게 한다.
- 업캐스팅한 레퍼런스로는 객체 내에 모든 멤버에 접근할 수 없고 슈퍼 클래스의 멤버만 접근할 수 있다.

instanceof 연산자자
- 업캐스팅을 한 경우, 레퍼런스가 가리키는 객체의 진짜 클래스 타입을 구분하기 어렵다.
- 레퍼런스가 가리키는 객체가 어떤 클래스 타입인지 구분하기 위해, 자바에서는 instanceof 연산자를 씀
- 레퍼런스 instanceof 클래스명

다운캐스팅
- 업캐스팅과 반대로 캐스팅하는 것
- 업캐스팅과 달리 명시적으로 타입 변환을 지정해야 함

메소드 오버라이딩 
- 슈퍼 클래스에 선언된 메소드와 같은 이름, 같은 리턴 타입, 같은 매개 변수 리스트를 갖는 메소드를 서브 클래스에서 재작성하는 것
- 슈퍼 클래스에 정의된 함수일지라도 자식 클래스에서 동일한 return, 동일한 이름, 동일한 접근제어자로 덮어쓰기(Override)를 하여 그 기능을 사용한다는 뜻
- 슈퍼 클래스에 선언된 메소드를, 각 서브 클래스들이 자신만의 내용으로 새로 구현하는 기능
- 상속을 통해 '하나의 인터페이스에 서로 다른 내용 구현'이라는 객체지향의 다형성을 실현하는 도구
- 쉽게 말해 부모 것을 덮어쓰는 것
- 슈퍼 클래스의 특정 메소드를 자신의 특성에 맞게 새로 만들어 사용하고자 하는 경우에 활용함
- 동적 바인딩임 -> 실행할 메소드를 컴파일 시에 결정하지 않고 실행 시에 결정하는 것
                    -> 자바에서는 동적 바인딩을 통해 오버라이딩된 메소드가 항상 실행 되도록 보장함

 오버라이딩의 제약사항
1. 슈퍼 클래스의 메소드와 동일한 원형으로 작성한다.
-  슈퍼 클래스의 메소드와 동일한 이름, 동일한 매개변수 타입의 개수, 동일한 리턴 타입을 갖는 메소드를 작성해야한다.

2. 슈퍼 클래스 메소드의 접근 지정자보다 접근의 범위를 좁여 오버라이딩 할 수 없다.
- 슈퍼 클래스에 protected로 선언된 메소드는 서브 클래스에서 protected나 public으로만 오버라이딩할 수 있음
- public으로 선언된 메소드는 서브 클래스에서 public으로만 오버라이딩 할 수 있음
- protected -> public O / protected -> private X

3. static이나 private 또는 final로 선언된 메소드는 서브 클래스에서 오버라이딩 할 수 없음

오버로딩
- 같은 클래스나 상속 관계에서 동일한 이름의 메소드 중복 작성
- 한 클래스 내에 이미 사용하는 이름의 메소드가 있더라도 특정 규칙을 지킨다면 동일한 이름의 메소드를 정의하도록 허용하는 기술
- 하나의 클래스에 같은 이름의 함수를 여러개 정의하고, 매개변수의 유형과 개수를 다르게 하여 사용한다.

   오버로당 규칙
   1. 메소드의 이름이 같아야 함.
   2. 매개 변수의 타입이나 개수가 달라야 성립함

@Override 
- 오버라이딩하는 메소드 앞에 붙이는 것
- 어노테이션이라는 것으로 일반적인 주석과 다르게, 검증하는 기능을 함
- 오버 라이딩을 검증하는 기능을 함
- 코드상으로 검사했을 때 오버 라이딩이 실제로 시행되지 않았다면 컴파일 시 오류를 출력함

추상 메소드
- 선언은 되어 있으나 코드가 구현되오 있지 않은 껍데기만 있는 메소드
- 추상 메소드를 작성하려면 abstract 키워드와 함께 원형만 선언하고 코드는 작성하지 않는다.

추상 클래스
- 추상 클래스가 되는 경우
1. 추상 메소드를 포함하는 클래스
2. 추상 메소드는 없지만 abstract로 선언한 클래스
3. 추상 클래스에는 실행 코드가 없는 미완성 상태인 추상메소드가 있을 수 있기 때문에 객체를 생성할 수 없음
- 추상 클래스의 구현 -> 슈퍼클래스에 선언된 모든 추상 메소드를 서브 클래스에서 오버라이딩하여 실행 가능한 코드로 구현하는 것

인터페이스
- 서로 다른 하드웨어 장치들이 상호 데이터를 데이터를 주고 받을 수 있는 규격을 의미
- 자바의 인터페이스는 interface 키워드를 사용하여 클래스를 선언하듯이 선언
- 클래스는 인터페이스를 상속할 수 없고, 인터페이스끼리만 상속이 가능하다
- 일동의 추상 클래스로서 변수 멤버를 가지지 못한다.
- 클래스가 인터페이스를 구현할 때 implements를 사용
- 다중 구현 가능

- ex.
interface A {
  void print ();
}

interface B {
  void scan ();
}

class printer implements A, B {
  @Override
  public void print(){System.out.println("printing..."); }
  @Override
  public void scan(){System.out.println("scannig...");} 
  }