캡슐화는 알멩이와 껍질로 나뉘는데 알멩이는 데이터(속성)을 말하며 껍질은 메소드를 말함

사옹하는 이유
1. 명시적으로 선언을 해야 실수를 안함
2. 외부 클래스로부터 실수로 건들이지 말자고 일종의 TAG 역할을 함
3. 공동작업을 할 때, public만 신경쓰고록 TAG를 붙인것

설계적 측면의 캡슐화
- 객체 안에 변수가 있고 외부에서는 접근 못하게 하는것
- 접근지정자인 private안에 int wheel(멤버변수)이 있으면 값을 수정하는 것도 안되고(input), 값을 불러오는 것도 안됨(output) 만약 보호되어있는 것을을 쓰고싶으면 return을 써서 불러와야함

this
- 안에 있는 변수인지 밖에 있는 변수인지 구별을 하기 위해 사용되어야 하지만 자동으로 컴파일러가 생성해줌

- input 역할을 setter로 하고 output 역할을 getter라고 함
ex. my.getwheel() / my.setwheel(4) 

캡슐화가 있어야 읽기 전용, 쓰기 전용의 모드를 만들 수 있음
- setter : X  getter : O -> output만 있음 -> 읽기 전용

- setter : O  getter : X -> input만 있음 -> 쓰기 전용

-dlssiud